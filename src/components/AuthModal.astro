---
// No server-side logic needed for this component - it's all client-side
---

<div class="auth-modal" id="auth-modal" style="display: none;">
  <div class="auth-modal-content">
    <div class="auth-header">
      <h2 id="auth-title">Welcome to TechConnect 2024</h2>
      <button class="close-btn" onclick="hideAuthModal()">Ã—</button>
    </div>
    
    <div class="auth-tabs">
      <button class="auth-tab active" data-tab="login" onclick="switchAuthTab('login')">
        Login
      </button>
      <button class="auth-tab" data-tab="signup" onclick="switchAuthTab('signup')">
        Sign Up
      </button>
    </div>
    
    <!-- Login Form -->
    <div class="auth-form" id="login-form">
      <form onsubmit="handleLogin(event)">
        <div class="form-group">
          <label for="login-email">Email</label>
          <input type="email" id="login-email" required>
        </div>
        
        <div class="form-group">
          <label for="login-password">Password</label>
          <input type="password" id="login-password" required>
        </div>
        
        <button type="submit" class="auth-submit-btn">
          Login
        </button>
        
        <div class="demo-accounts">
          <div class="demo-label">Demo accounts (password: demo123):</div>
          <button type="button" class="demo-btn" onclick="fillDemoAccount('sarah.chen@innovatefirst.com', 'demo123')">
            Dr. Sarah Chen (CTO)
          </button>
          <button type="button" class="demo-btn" onclick="fillDemoAccount('marcus@techventures.com', 'demo123')">
            Marcus Rodriguez (AI Lead)
          </button>
          <button type="button" class="demo-btn" onclick="fillDemoAccount('jessica@appcorp.com', 'demo123')">
            Jessica Kim (Mobile Engineer)
          </button>
          <button type="button" class="demo-btn" onclick="fillDemoAccount('robert@cloudtech.com', 'demo123')">
            Robert Chen (Cloud Architect)
          </button>
          <button type="button" class="demo-btn" onclick="fillDemoAccount('lisa@designlab.com', 'demo123')">
            Lisa Park (UX Designer)
          </button>
          
          <div class="demo-note">
            Create these accounts first using the demo user creation tool.
          </div>
        </div>
      </form>
    </div>
    
    <!-- Signup Form -->
    <div class="auth-form" id="signup-form" style="display: none;">
      <form onsubmit="handleSignup(event)">
        <div class="form-group">
          <label for="signup-name">Full Name</label>
          <input type="text" id="signup-name" required>
        </div>
        
        <div class="form-group">
          <label for="signup-email">Email</label>
          <input type="email" id="signup-email" required>
        </div>
        
        <div class="form-group">
          <label for="signup-password">Password</label>
          <input type="password" id="signup-password" required minlength="6">
        </div>
        
        <div class="form-group">
          <label for="signup-title">Job Title</label>
          <input type="text" id="signup-title" placeholder="e.g. Software Engineer">
        </div>
        
        <div class="form-group">
          <label for="signup-company">Company</label>
          <input type="text" id="signup-company" placeholder="e.g. TechCorp">
        </div>
        
        <button type="submit" class="auth-submit-btn">
          Create Account
        </button>
      </form>
    </div>
    
    <div class="auth-error" id="auth-error" style="display: none;"></div>
    <div class="auth-loading" id="auth-loading" style="display: none;">Processing...</div>
  </div>
</div>

<style>
  .auth-modal {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 20px;
  }

  .auth-modal-content {
    background: white;
    border: 2px solid black;
    max-width: 400px;
    width: 100%;
    max-height: 90vh;
    overflow-y: auto;
  }

  .auth-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px;
    border-bottom: 1px solid black;
  }

  .auth-header h2 {
    margin: 0;
    font-size: 1.2em;
  }

  .close-btn {
    background: none;
    border: 1px solid black;
    width: 30px;
    height: 30px;
    cursor: pointer;
    font-size: 18px;
    font-family: inherit;
  }

  .auth-tabs {
    display: flex;
    border-bottom: 1px solid black;
  }

  .auth-tab {
    flex: 1;
    padding: 12px;
    border: none;
    border-right: 1px solid black;
    background: white;
    cursor: pointer;
    font-family: inherit;
  }

  .auth-tab:last-child {
    border-right: none;
  }

  .auth-tab.active {
    background: black;
    color: white;
  }

  .auth-form {
    padding: 20px;
  }

  .form-group {
    margin-bottom: 16px;
  }

  .form-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 4px;
    font-size: 0.9em;
  }

  .form-group input {
    width: 100%;
    padding: 8px;
    border: 1px solid black;
    font-family: inherit;
    background: white;
  }

  .auth-submit-btn {
    width: 100%;
    padding: 12px;
    border: 1px solid black;
    background: black;
    color: white;
    cursor: pointer;
    font-family: inherit;
    font-weight: bold;
  }

  .auth-submit-btn:hover {
    background: #333;
  }

  .demo-accounts {
    margin-top: 20px;
    padding-top: 16px;
    border-top: 1px solid black;
  }

  .demo-label {
    font-size: 0.8em;
    margin-bottom: 8px;
    font-weight: bold;
  }

  .demo-btn {
    display: block;
    width: 100%;
    padding: 6px 8px;
    margin-bottom: 4px;
    border: 1px solid black;
    background: white;
    cursor: pointer;
    font-family: inherit;
    font-size: 0.8em;
    text-align: left;
  }

  .demo-btn:hover {
    background: #f0f0f0;
  }

  .demo-separator {
    text-align: center;
    margin: 8px 0;
    font-size: 0.7em;
    color: #666;
  }

  .demo-note {
    font-size: 0.7em;
    color: #666;
    margin-top: 8px;
    line-height: 1.3;
  }

  .auth-error {
    padding: 12px 20px;
    background: #ff6b35;
    color: white;
    font-size: 0.9em;
  }

  .auth-loading {
    padding: 12px 20px;
    background: #4ecdc4;
    color: white;
    text-align: center;
    font-weight: bold;
  }
</style>

<script>
  function switchAuthTab(tab) {
    // Update tab buttons
    document.querySelectorAll('.auth-tab').forEach(btn => {
      btn.classList.toggle('active', btn.dataset.tab === tab);
    });
    
    // Update forms
    document.getElementById('login-form').style.display = tab === 'login' ? 'block' : 'none';
    document.getElementById('signup-form').style.display = tab === 'signup' ? 'block' : 'none';
    
    // Clear error
    hideAuthError();
  }

  function showAuthModal() {
    document.getElementById('auth-modal').style.display = 'flex';
    // Clear forms
    document.querySelectorAll('.auth-form input').forEach(input => input.value = '');
    hideAuthError();
  }

  function hideAuthModal() {
    document.getElementById('auth-modal').style.display = 'none';
  }

  function showAuthError(message) {
    const errorEl = document.getElementById('auth-error');
    errorEl.textContent = message;
    errorEl.style.display = 'block';
  }

  function hideAuthError() {
    document.getElementById('auth-error').style.display = 'none';
  }

  function showAuthLoading(show = true) {
    document.getElementById('auth-loading').style.display = show ? 'block' : 'none';
  }

  function fillDemoAccount(email, password) {
    document.getElementById('login-email').value = email;
    document.getElementById('login-password').value = password;
  }

  async function createDemoAccount(email, password, name, title, company) {
    hideAuthError();
    showAuthLoading(true);
    
    try {
      const { signUp, signIn } = await import('/src/lib/auth.js');
      
      // First try to sign up
      const { data: signupData, error: signupError } = await signUp(email, password, {
        name,
        title, 
        company
      });
      
      if (signupError) {
        // If user already exists, try to sign in
        if (signupError.message.includes('already registered') || signupError.message.includes('already been registered')) {
          console.log('User exists, attempting login...');
          const { data: signinData, error: signinError } = await signIn(email, password);
          
          if (signinError) {
            showAuthError(`Account exists but login failed: ${signinError.message}`);
            return;
          } else {
            hideAuthModal();
            window.location.reload();
            return;
          }
        } else if (signupError.message.includes('Database error')) {
          // Database error - likely a schema issue, but user might have been created
          console.log('Database error during signup, trying login...');
          const { data: signinData, error: signinError } = await signIn(email, password);
          
          if (!signinError) {
            hideAuthModal();
            window.location.reload();
            return;
          } else {
            showAuthError(`Setup issue detected. Please try creating the account through the regular signup form instead.`);
            return;
          }
        } else {
          showAuthError(`Signup failed: ${signupError.message}`);
          return;
        }
      }
      
      // Account created successfully
      showAuthError(`Demo account created for ${name}! You can now login.`);
      
      // Switch to login tab and fill credentials
      switchAuthTab('login');
      fillDemoAccount(email, password);
      
    } catch (error) {
      showAuthError('Failed to create demo account. Please try again.');
    }
    
    showAuthLoading(false);
  }

  async function handleLogin(event) {
    event.preventDefault();
    hideAuthError();
    showAuthLoading(true);
    
    const email = document.getElementById('login-email').value;
    const password = document.getElementById('login-password').value;
    
    try {
      const { signIn } = await import('/src/lib/auth.js');
      const { data, error } = await signIn(email, password);
      
      if (error) {
        showAuthError(error.message);
      } else {
        hideAuthModal();
        // Refresh page to show authenticated state
        window.location.reload();
      }
    } catch (error) {
      showAuthError('Login failed. Please try again.');
    }
    
    showAuthLoading(false);
  }

  async function handleSignup(event) {
    event.preventDefault();
    hideAuthError();
    showAuthLoading(true);
    
    const name = document.getElementById('signup-name').value;
    const email = document.getElementById('signup-email').value;
    const password = document.getElementById('signup-password').value;
    const title = document.getElementById('signup-title').value;
    const company = document.getElementById('signup-company').value;
    
    try {
      const { signUp } = await import('/src/lib/auth.js');
      const { data, error } = await signUp(email, password, {
        name,
        title,
        company
      });
      
      if (error) {
        showAuthError(error.message);
      } else {
        showAuthError('Account created! Please check your email to verify your account.');
        // Switch to login tab
        switchAuthTab('login');
      }
    } catch (error) {
      showAuthError('Signup failed. Please try again.');
    }
    
    showAuthLoading(false);
  }

  // Make functions globally available
  window.showAuthModal = showAuthModal;
  window.hideAuthModal = hideAuthModal;
  window.switchAuthTab = switchAuthTab;
  window.fillDemoAccount = fillDemoAccount;
  window.createDemoAccount = createDemoAccount;
  window.handleLogin = handleLogin;
  window.handleSignup = handleSignup;
</script>